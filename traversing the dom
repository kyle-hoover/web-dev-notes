Document Object Model = a tree of objects based on the HTML document that is created by the browser when it loads a page

elements inside other elements are considered descendants
	we use family words to refer to these relationships
	for instance, an outer <div> would be considered the parent of any <div> element inside it (those with class 'child' above)
	any other <div>s inside of 'parent' on the same level as 'child' are considered siblings of each other
	a <p> in any 'child' would itself be a child of the 'child' element that contains it and a grandchild of 'parent'
	
parent = outermost element of all elements inside of it

children = elements inside the outer element

.children() = allows us to target children elements

<div class='parent' id='holder'>
	<div>Child <span>1</span></div>
	<div>Child <span>2</span></div>
	<div>Child <span>3</span></div>
</div>

the <div>Child elements are the children

const $kids = $('#holder').children();

$kids.on('click', event => {
	$(event.currentTarget).css('border', '1px solid black');
});
	the $kids variable refers to all children of the element with id 'holder' (the divs inside '#holder')
	.on() method adds the click event handler to these $kids
	when one of them is clicked, jQuery will add a border around it that is 1px wide and solid black

$(".shoe-details").children().removeClass('disabled')
	selected the shoe-details class
	found the children
	removed the disabled class from the children
	
$('.choice').on('click', event => {
	$(event.currentTarget).parent().hide();
});
	in the example above, the .parent() method targets the parent element of '.choice' elements and removes it from the DOM
	
$('.choice').on('click', event => {
	$(this).siblings().removeClass('selected');
	$(event.currentTarget).addClass('selected');
});
	in the code above, the .siblings() method targets elements adjacent to the clicked '.choice' and removes the 'selected' class from any previously clicked '.choice's 
	then the 'selected' class is added only to the clicked '.choice'
	
$('.shoe-details li').on('click', event => {
	$(event.currentTarget).addClass('active');
	$(event.currentTarget).siblings().removeClass("active");
	
	so when users click on the button from shoe-details li (making it active) and removing the active classes from siblings 

.closest() = to select an element close to the current element
	the .closest() method will travel up the DOM tree to find a specified selector closest to it
	
$('.example-class-one').closest('.another-class');
	the .closest() method is called on '.example-class' elements
	the method then targets the element selected by the .closest() method with a class of '.another-class'
	
<div class='.another-class'>
	<p class='.example-class-one'>1</p>
</div>
<div class='.another-class'>
	<p class='.example-class-two'>2</p>
</div>
	the jQuery above would select the <div> element that wraps the paragraph with a value of 1, because it is the closest element, 
	up the DOM tree, with the class .another-class
	
.next() = targetting the next element rather than all the siblings

<div class='heading'>MENU</div>
<ol style='display: none'>
  <li>Appetizers</li>
  <li>Entrees</li>
  <li>Salads</li>
  <li>Sides</li>
  <li>Desserts</li>
</ol>
	since the div and <ol> exist on the same level of the DOM, they are siblings
	since there are no elements between them, the <ol> is the next sibling of '.heading'
	we can add an event handler to the div element and use the .next() method to show and hide the <ol> using the .toggle() method
	
const $heading = $('.heading');
$heading.on('click', () => {
  $(event.currentTarget).next().toggle();
});
	in the example above, the .on() method attaches the click event handler to $heading
	then the callback function will toggle the class of the $heading's next sibling, the ol element.
