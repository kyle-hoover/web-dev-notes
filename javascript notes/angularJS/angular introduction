AngularJS = a JavaScript web framework aimed to make web apps simple to build and easy to maintain

module = contains the different components of an AngularJS app
	for example <body ng-app="myApp">

directive = defines the application's scope
	tells AngularJS that the myApp module will live within the <body> element, termed the application's scope
	<body ng-app="myApp"> = ng-app is the directive
	this is what we plug into HTML to connect to the controller (javascript)
	
controller = manages the app's data
	ng-controller="MainController" = means that we can use the file MainController to manipulate this information
	this is basically the javascript stuff

expressions = display values on the page

<h2> {{promo}} </h2>
	we can use the $scope.promo = "" in javascript to assign a value to this promo item

workflow:
	1.	Create a module, and use ng-app in the view to define the application scope.
	2.	Create a controller, and use ng-controller in the view to define the controller scope.
	3.	Add data to $scope in the controller so they can be displayed with expressions in the view.
			these are going to be the html elements (<h2> {{promo}} </h2>)
			
in javascript:
	$scope.product = {name: 'The Book of Trees', price: 19}
	
in html:
	<p class="title"> {{product.name}} </p> = replaces the paragraph with the name in the .product (in this case "The Book of Trees")
	<p class="price"> {{product.price}} </p> = replaces the paragraph with the price in the .product (in this case 19)
	<p class="price"> {{ product.price | currency }} </p> = changes the price to a currency

filter = formats the value of an expression
	{{ output | filter }}
	AngularJS gets the value of product.price
	It sends this number into the currency filter. The pipe symbol (|) takes the output on the left and "pipes" it to the right
	The filter outputs a formatted currency with the dollar sign and the correct decimal places
	
angular filters:
	filter = Selects a subset of items from array and returns it as a new array.
	currency = Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.
	number = Formats a number as text.
	date = Formats date to a string based on the requested format.
	json = Allows you to convert a JavaScript object into JSON string.
	lowercase = Converts string to lowercase.
	uppercase = Converts string to uppercase.
	limitTo = Creates a new array or string containing only a specified number of elements. 
		The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit. 
		Other array-like objects are also supported (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). 
		If a number is used as input, it is converted to a string.
	orderBy = Returns an array containing the items from the specified collection, ordered by a comparator function based on the values computed using the expression predicate.

directives = bind behavior to HTML elements. 
	When the app runs, AngularJS walks through each HTML element looking for directives. 
	When it finds one, AngularJS triggers that behavior (like attaching a scope or looping through an array).

ng-repeat = a directive that loops through an array and displays each element
	<div ng-repeat="product in products" class="col-md-6"> 
		the ng-repeat repeats all the HTML inside <div class="col-md-6"> for each element in the products array 
			(ng-repeat shows both products in the $scope.products array) 
		instead of writing the same HTML twice as before, we just use ng-repeat to generate the HTML twice


ng-click = a directive that runs a function when clicked
	<p class="likes" ng-click="plusOne($index)">{{ product.likes }}</p>
		when <p class="likes"> is clicked, ng-click tells AngularJS to run the plusOne() function in the controller
	$scope.plusOne = function(index) {
   		$scope.products[index].likes += 1;}
			the plusOne() function gets the index of the product that was clicked, and then adds one to that product's likes property
				plusOne() doesn't interact with the view at all; it just updates the controller. 
			any change made to the controller shows up in the view

Process:
	1. A user visits the AngularJS app.
	2. The view presents the app's data through the use of expressions, filters, and directives. Directives bind new behavior HTML elements.
	3. A user clicks an element in the view. If the element has a directive, AngularJS runs the function.
	4. The function in the controller updates the state of the data.
	5. The view automatically changes and displays the updated data. The page doesn't need to reload at any point.
