Regular expressions are special strings that represent a search pattern. 

Also known as "regex" or "regexp", they help programmers match, search, and replace text. 

Regular expressions can appear cryptic because a few characters have special meaning. 

The goal is to combine the symbols and text into a pattern that matches what you want, but only what you want. 

Regular expressions are used in programming languages to match parts of strings. 

You create patterns to help you do that matching.

If you want to find the word "the" in the string "The dog chased the cat", you could use the following regular expression: /the/. 

Notice that quote marks are not required within the regular expression.

Test Method:
	JavaScript has multiple ways to use regexes. 
	
	One way to test a regex is using the .test() method. 
	
		The .test() method takes the regex, applies it to a string (which is placed inside the parentheses), and returns true or false if your pattern finds something or not.
		
			let whatWereTesting = "hey there ;)))";
			let whatWeWantToFind = /hey/;
			let usedToStoreAnswer = whatWeWantToFind.test(whatWereTesting);
		
		Example:
		
			let testStr = "freeCodeCamp";
			let testRegex = /Code/;
			let result = testRegex.test(testStr);
			// Returns true
	
	That regex searched for a literal match of the string "Hello". 
	
	Here's another example searching for a literal match of the string "Kevin":

		let testStr = "Hello, my name is Kevin.";
		let testRegex = /Kevin/;
		testRegex.test(testStr);
		// Returns true

	Any other forms of "Kevin" will not match. For example, the regex /Kevin/ will not match "kevin" or "KEVIN".

		let wrongRegex = /kevin/;
		wrongRegex.test(testStr);
		// Returns false

Alternation:
	Using regexes like /coding/, you can look for the pattern "coding" in another string.

	This is powerful to search single strings, but it's limited to only one pattern. 
	
	You can search for multiple patterns using the alternation or OR operator: |.

	This operator matches patterns either before or after it. 
		
		For example, if you wanted to match "yes" or "no", the regex you want is /yes|no/.

	You can also search for more than just two patterns. 
	
		You can do this by adding more patterns with more OR operators separating them, like /yes|no|maybe/.

Ignore Case: 
	Up until now, you've looked at regexes to do literal matches of strings. 
	
	But sometimes, you might want to also match case differences.

	You can match both cases using what is called a flag. 
	
	There are other flags but here you'll focus on the flag that ignores case - the i flag. 
	
	You can use it by appending it to the regex. 
	
		An example of using this flag is /ignorecase/i. 
		
		This regex can match the strings "ignorecase", "igNoreCase", and "IgnoreCase".
	
	Example:
	
		let myString = "freeCodeCamp";
		let fccRegex = /freecodecamp/i;
		let result = fccRegex.test(myString);

Extract Matches:
	So far, you have only been checking if a pattern exists or not within a string. 
	
	You can also extract the actual matches you found with the .match() method.

	To use the .match() method, apply the method on a string and pass in the regex inside the parentheses. Here's an example:

		"Hello, World!".match(/Hello/);
		// Returns ["Hello"]
		let ourStr = "Regular expressions";
		let ourRegex = /expressions/;
		ourStr.match(ourRegex);
		// Returns ["expressions"]

	Another example:
	
		let extractStr = "Extract the word 'coding' from this string.";
		let codingRegex = /coding/; 
		let result = extractStr.match(codingRegex); 

Find More Than One Match:
	So far, you have only been able to extract or search a pattern once.

		let testStr = "Repeat, Repeat, Repeat";
		let ourRegex = /Repeat/;
		testStr.match(ourRegex);
		// Returns ["Repeat"]

	To search or extract a pattern more than once, you can use the g flag.

		let testStr = "Repeat, Repeat, Repeat";
		let repeatRegex = /Repeat/g;
		testStr.match(repeatRegex);
		// Returns ["Repeat", "Repeat", "Repeat"]

	You can have multiple flags on your regex like /search/gi
	
	Another example:
		
		let twinkleStar = "Twinkle, twinkle, little star";
		let starRegex = /twinkle/gi;
		let result = twinkleStar.match(starRegex); 

Wildcard Period:
	Sometimes you won't (or don't need to) know the exact characters in your patterns. 
	
	Thinking of all words that match, say, a misspelling would take a long time. 
	
	Luckily, you can save time using the wildcard character: .

		The wildcard character . will match any one character. 
		
		The wildcard is also called dot and period. 
		
		You can use the wildcard character just like any other character in the regex. 
		
		For example, if you wanted to match "hug", "huh", "hut", and "hum", you can use the regex /hu./ to match all four words.

			let humStr = "I'll hum a song";
			let hugStr = "Bear hug";
			let huRegex = /hu./;
			humStr.match(huRegex); // Returns ["hum"]
			hugStr.match(huRegex); // Returns ["hug"]

		Another example:
		
			let exampleStr = "Let's have fun with regular expressions!";
			let unRegex = /.un/; 
			let result = unRegex.test(exampleStr);
			//this can match with strings like "run", "sun", "fun", "pun", "nun", and "bun"
