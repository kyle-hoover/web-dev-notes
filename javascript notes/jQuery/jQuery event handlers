event handler has two parts:
	1.	event listener = a method that listens for a specified event to occur, like a click event
	2.	callback function = a function that executes when something triggers the event listener
	
$('.example-class').on('click', () => {
	$('.example-class') = selects all elements of the example-class class
	.on('click') = the event listener (checks if the user has clicked on the example-class element
	second argument to .on() is a callback function (when a 'click' occurs on an example-class element, this function executes)
	 
event listeners:
	'click' = when the user clicks
		$('.example-class').on('click', () => {
	'mouseeneter' = triggers a callback function when a user enters the area that a targeted element occupies
		$('.example-class').on('mouseenter',  () => {
	'mouseleave' = triggers a callback function when a user's mouse leaves the area that an element occupies
		$('.example-class').on('mouseleave', () => {

chaining events = instead of re-declaring the HTML element you're selecting, you can append one event to another
	$('.example-class').on('mouseenter', () => {
		$('.example-class-one').show();
		}).on('mouseleave', () => {
		$('.example-class-one').hide();
});
	you can start the next change after the ending brackets of the previous chain

$('.product-photo').on('mouseenter',() => {
	$('.product-photo').addClass('photo-active');
	}).on('mouseleave', () => {
	$('.product-photo').removeClass('photo-active');
})
	this says that for our product-photo class, when the mouse enters, we will add a css class to zoom in (photo-active)
	when the mouse leaves, we will remove the photo-active class (which will effectively zoom back out)

currentTarget = targets the current element that the user mouses over
	$('.example-class').on('mouseenter', event => {
		$(event.currentTarget).addClass('photo-active');
	});
	when the mouseenter event listener is triggered, the .on() method generates an event object that we pass into the callback function
	inside the callback function, we select event.currentTarget (this refers to the .example-class element that the user has moused over)
		you will only use it inside a callback function
  
when we change the code from:
	$('.product-photo').on('mouseenter',() => {
		$('.product-photo').addClass('photo-active');
		}).on('mouseleave', () => {
		$('.product-photo').removeClass('photo-active');
	})
  
  	to
  
  	$('.product-photo').on('mouseenter', event => {
   		$(event.currentTarget).addClass('photo-active')
 	 	}).on('mouseleave', event => {
    	$(event.currentTarget).removeClass('photo-active')
  	})

	instead of all product-photo classes being zoomed in, only the currentTarget is being zoomed in
