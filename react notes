React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript
  lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable
  JSX is similar to the HTML that you have already learned, however there are a few key differences 
  because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX
  to do this, you simply include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }
  
Because JSX is not valid JavaScript, JSX code must be compiled into JavaScript
  The transpiler Babel is a popular tool for this process
  
const JSX = <h1>Hello JSX!</h1>;
  const = like var but unchanging

JSX can represent more complex HTML as well
  it must return a single element
  This one parent element would wrap all of the other levels of nested elements.
  For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.
  
Valid JSX:
  <div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p> 
  </div>
  
Invalid JSX:
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
 
 
const JSX = <div>
  <h1>example1</h1>
  <p>example2</p>
  <ul>
    <li>example3</li>
    <li>example3</li>
    <li>example3</li>
  </ul>
  </div>
      Note: When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. 
      Also notice this challenge uses a div tag to wrap all the child elements within a single parent element. 
      If you remove the div, the JSX will no longer transpile. 
      Keep this in mind, since it will also apply when you return JSX elements in React components.
      
JSX comments = {/* */} wraps around the comment text

So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. 
  With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.
  
ReactDOM = a simple method to render React elements to the DOM
  
ReactDOM.render(componentToRender, targetNode)
	the first argument is the React element or component that you want to render
	the second argument is the DOM node that you want to render the component to
	ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them

ReactDOM.render(JSX, document.getElementById('challenge-node'))
	takes the argument JSX and renders it to the challenge node ID 
	use document.getElementById() to select the DOM node to render them to
